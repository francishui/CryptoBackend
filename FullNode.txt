import Crypto
import Crypto.Random
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
import binascii
import json
import requests
from flask import Flask, jsonify, request
from urllib.parse import urlparse
import datetime
import hashlib
from datetime import datetime

app = Flask(__name__)

DIFFICULTY_ADJUSTMENT_INTERVA = 10
#In second, ideal time for a block being mine
BLOCK_GENERATION_INTERVAL = 10
#in time, how often the difficulty should be adjusted


#sha 256 function
def sha256(message):
    encoded_message = str(message).encode('ascii')
    hashed_output = hashlib.sha256(encoded_message)
    return hashed_output

#function that return the merkle tree path from input transaction list and target transaction
def merklePath(input, target_transaction):
    merklePath = []
    tempList = []
    tempStr = ""
    target = sha256(target_transaction.to_json()).hexdigest()
    for transaction in input:
        tempList.append(sha256(transaction).hexdigest())
    while True:
        tempList2 = tempList
        tempList = []
        for i in range(len(tempList2)):
            tempStr = tempStr + tempList2[i]
            if target == tempList2[i]:
                if i % 2 == 0:  # the target transaction in the left hand side
                    if i+1<len(tempList2):
                        merklePath.append(["1", tempList2[i + 1]])
                        newstring = tempList2[i] + tempList2[i + 1]
                        target = sha256(newstring).hexdigest()
                    else:  # the target transaction in the left hand side but no other transaction in the right
                        merklePath.append(["2"])
                        newstring = tempList2[i]
                        target = sha256(newstring).hexdigest()
                else: #the target transaction in the right hand side
                    merklePath.append(["0", tempList2[i - 1]])
                    newstring = tempList2[i - 1] + tempList2[i]
                    target = sha256(newstring).hexdigest()
            if ((i + 1) % 2 == 0) or (i == (len(tempList2) - 1)): #current transaction is even number or the last
                tempList.append(sha256(tempStr).hexdigest())
                tempStr = ""
        if len(tempList) == 1: #return when the list become one item
            return merklePath

#function return the merkle root
def get_merkleroot(input):
    tempList = []
    tempStr = ""
    for transaction in input:
        tempList.append(sha256(transaction).hexdigest())

    while True:
        tempList2 = tempList
        tempList = []
        for i in range(len(tempList2)):
            tempStr = tempStr + tempList2[i] #combine the second hash value with the previous one
            if ((i + 1) % 2 == 0) or (i == (len(tempList2) - 1)): #if the transaction is even number or the last
                tempList.append(sha256(tempStr).hexdigest())
                tempStr = ""
        if len(tempList) == 1:
            return tempList[0] #return when the list become only one item

#fuction return the nonce value base on the difficulty required
def getNonce(message, diff):
    nonce = 0
    prefix = '0' * diff
    while (True):
        hashed_result = sha256(str(nonce) + message)
        if (hashed_result.startswith(prefix) == True): #only return when the nonce start with the prefix required
            return nonce
        nonce = nonce + 1


class Transaction:
    def __init__(self, sender, recipient, value, transaction_fee, timestamp, signature=0):
        self.sender = sender  #sender of the transaction
        self.recipient = recipient #recipent of the transaction
        self.value = value #value of this transaction
        self.transaction_fee = transaction_fee #transaction fee need to pay by sender to the recipient
        self.signature = signature #signature signed by the sender
        self.timestamp = timestamp #time of making this transaction

    # return sender info.
    def get_sender(self):
        return self.sender

    # return recipient info.
    def get_recipient(self):
        return self.recipient

    # class information to string with specific format
    def to_dict(self):
        return ({'sender': self.sender, 'recipient': self.recipient, 'transaction_fee': self.transaction_fee,
                 'value': self.value, 'timestamp': self.timestamp})

    # add signature to the transaction
    def add_signature(self, signature):
        self.signature = signature

    #function check if the signature is vaild for this transaction
    def verify_transaction_signature(self):
        if hasattr(self, 'signature'):
            public_key = RSA.importKey(binascii.unhexlify(self.sender))
            verifier = PKCS1_v1_5.new(public_key)
            h = SHA.new(str(self.to_dict()).encode('utf8'))
            return verifier.verify(h, binascii.unhexlify(self.signature))
        else:
            return False

    #function return the string of the dictionary of the class value
    def to_json(self):
        return json.dumps(self.__dict__, sort_keys=False)


class Wallet:
    def __init__(self, type):
        random = Crypto.Random.new().read
        self._private_key = RSA.generate(1024, random) #private of the wallet
        self._public_key = self._private_key.publickey() #public key of the wallet
        self.type = type #wallet type: full node or lightweight node

    #function that sign the transaction for the income transaction
    def sign_transaction(self, transaction: Transaction):
        signer = PKCS1_v1_5.new(self._private_key)
        h = SHA.new(str(transaction.to_dict()).encode('utf8'))
        return binascii.hexlify(signer.sign(h)).decode('ascii')

    #return the public key as a class variable
    @property
    def identity(self):
        pubkey = binascii.hexlify(self._public_key.exportKey(format='DER'))
        return pubkey.decode('ascii')

    #return the private key as a class variable
    @property
    def privateIndentity(self):
        prikey = binascii.hexlify(self._private_key.exportKey(format='DER'))
        return prikey.decode('ascii')


class Block:
    def __init__(self, index, difficulty, transactions, timestamp, previous_hash, hash=0, nonce=0):
        self.index = index #index of the block
        self.transactions = transactions #transaction list of the transaction in the block
        self.timestamp = timestamp #time of mined this block
        self.previous_hash = previous_hash #the hash value of the previous block
        self.hash = hash #the hash value of this block
        self.nonce = nonce #nonce of this block
        self.difficulty = difficulty #difficulty when mining this block
        self.merkleRoot = get_merkleroot(self.transactions) #the merkle root of the transactions

    #function return the class variable into string by specify format
    def to_dict(self):
        return (
        {'index': self.index, 'difficulty': self.difficulty, 'timestamp': self.timestamp, 'merkleRoot': self.merkleRoot,
         'previous_hash': self.previous_hash, 'nonce': self.nonce})

    #fuction return the dictionary of the class to string
    def to_json(self):
        return json.dumps(self.__dict__)

    #return the hash value of the block
    def compute_hash(self):
        return sha256(str(self.to_dict()).encode()).hexdigest()


class Blockchain:
    nodes = set() #set of relative node of this node

    def __init__(self):
        self.unconfirmed_transactions = [] #list of unconfirmed transactions that need to be mined
        self.chain = [] #list of block inside the blockchain
        self.create_genesis_block() #the first block of the

    #function create a genesis block
    def create_genesis_block(self):
        block_reward = [Transaction("Block_Reward", myWallet.identity, "5.0", "0.0",
                                    datetime.now().timestamp()).to_json()]  #the first item in the genesis is block_reward
        genesis_block = Block(0, 0, block_reward, datetime.now().timestamp(), "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block.to_json()) #add the genesis block into the chain

    #fuction add new transaction into the block
    def add_new_transaction(self, transaction: Transaction):
        if transaction.verify_transaction_signature():  #first verify the transaction with the signature
            self.unconfirmed_transactions.append(transaction.to_json())
            myobj = {'transaction': json.dumps(self.unconfirmed_transactions)}  #boardcast the transaction to the node
            neighbours = self.nodes
            for node in neighbours:
                response = requests.get('http://' + node + '/type')
                if response.status_code == 200:
                    if response.json()['type'] == "Full Node":  #only boardcast the transaction to the full node
                        response = requests.post('http://' + node + '/boardcast', data=myobj)
            return True
        else:
            return False #return false if the transaction not match with the signature

    #function of adding block into the chain
    def add_block(self, block, proof):
        previous_hash = self.last_block['hash'] #the previous hash is the hash value of the previous block
        if previous_hash != block.previous_hash: #reject the block if the previous hash does not equal the hash value of the previous block
            return False
        if not self.is_valid_proof(block, proof): #reject the block if the block is checked invalid proof
            return False
        block.hash = proof
        self.chain.append(block.to_json()) #add to the chain if the block found valid
        return True

    #function check if the block is valid
    #the block is valid when the hash value of the block match the requirement of difficulty
    #and the value of block_hash equal the hash value of the block
    def is_valid_proof(self, block, block_hash):
        return (block_hash.startswith('0' * block.difficulty) and block_hash == block.compute_hash())

    #function to get a vaild hash value with the required difficulty
    def proof_of_work(self, block):
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * block.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    #function of adjusting the difficulty of the block
    def adjustDifficulty(self):
        block = json.loads(self.chain[len(self.chain) - 10]) #this function need to compare with the 10th block in previous and last block
        prevAdjustmentBlock = Block(block['index'], block['difficulty'], block['transactions'], block['timestamp'],
                                    block['previous_hash'], block['hash'], block['nonce'])
        last_block = Block(self.last_block['index'], self.last_block['difficulty'], self.last_block['transactions'],
                           self.last_block['timestamp'], self.last_block['previous_hash'], self.last_block['hash'],
                           self.last_block['nonce'])
        #the time expected for generating this 10 block is 10*the second that expected a block should be
        timeExpected = BLOCK_GENERATION_INTERVAL * DIFFICULTY_ADJUSTMENT_INTERVA
        timeTaken = last_block.timestamp - prevAdjustmentBlock.timestamp #actual time taken for this 10 block
        if (timeTaken < (timeExpected / 2)): #if the timetaken is less than the half of time expected, than increase the difficulty
            return prevAdjustmentBlock.difficulty + 1
        elif (timeTaken > timeExpected * 2): #if the timetaken is more than 2 times of time expected, than decrease the difficulty
            if (prevAdjustmentBlock.difficulty > 0):
                return prevAdjustmentBlock.difficulty - 1
            else: #the difficulty remain the same if the difficulty already 0
                return prevAdjustmentBlock.difficulty
        else:
            return prevAdjustmentBlock.difficulty

    #function of return the difficulty for the blcok
    def get_Difficulty(self):
        last_block = Block(self.last_block['index'], self.last_block['difficulty'], self.last_block['transactions'],
                           self.last_block['timestamp'], self.last_block['previous_hash'], self.last_block['hash'],
                           self.last_block['nonce'])
        if (int(last_block.index) % DIFFICULTY_ADJUSTMENT_INTERVA == 0) and (int(last_block.index) != 0): #adjust the difficulty only for every 10 block
            return self.adjustDifficulty()
        else:
            return last_block.difficulty

    #function of mining the block
    def mine(self, myWallet):
        fee = 0
        for transaction in self.unconfirmed_transactions: #accummulate the transaction fee for the block miner in the unconfirmed transaction list
            tran = json.loads(transaction)
            fee = fee + float(tran['transaction_fee'])
        transaction_fee = Transaction('transaction_fee', myWallet.identity, str(fee), "0.0",
                                      datetime.now().timestamp()).to_json()
        self.unconfirmed_transactions.insert(0, transaction_fee) #insert the transaction fee into the unconfirmed transactions list
        block_reward = Transaction("Block_Reward", myWallet.identity, "5.0", "0.0",
                                   datetime.now().timestamp()).to_json()
        self.unconfirmed_transactions.insert(0, block_reward) #inserr the block reward into the unconfirmed transactions list
        if not self.unconfirmed_transactions:
            return False
        new_block = Block(index=self.last_block['index'] + 1, difficulty=blockchain.get_Difficulty(),
                          transactions=self.unconfirmed_transactions, timestamp=datetime.now().timestamp(),
                          previous_hash=self.last_block['hash'])
        proof = self.proof_of_work(new_block) #making a valid proof of work for the block
        if self.add_block(new_block, proof):
            self.unconfirmed_transactions = [] #clear the unconfirmed transactions list after the block added
            return new_block
        else:
            return False  #return false if the block cannot be successfully added (being rejected)

    #function of register negibour node for this node
    def register_node(self, node_url):
        parsed_url = urlparse(node_url)
        if parsed_url.netloc:
            self.nodes.add(parsed_url.netloc)
        elif parsed_url.path:
            self.nodes.add(parsed_url.path)
        else:
            raise ValueError('Invalid URL')

    #function of return the balance of the entering address
    def getBalanceOfAddress(self, address):
        balance = 0
        current_index = 1
        while current_index < len(self.chain): #loop through all the block and transactions of the blockchain
            block = json.loads(self.chain[current_index])
            current_block = Block(block['index'], block['difficulty'], block['transactions'], block['timestamp'],
                                  block['previous_hash'], block['hash'], block['nonce'])
            if isinstance(current_block.transactions, list):
                for transaction in current_block.transactions:
                    transaction = json.loads(transaction)
                    if transaction['sender'] == address: #balance will minus the value of the transaction pay to other or pay for transaction fee
                        balance = balance - float(transaction['value'])
                        balance = balance - float(transaction['transaction_fee'])
                    if transaction['recipient'] == address: #balance will add the value of the transaction pay by other
                        balance = balance + float(transaction['value'])
            current_index = current_index + 1
        return balance

    # return json form of last block as a class varable
    @property
    def last_block(self):
        return json.loads(self.chain[-1])

    # function that consensus the blockchain with the blockchain of other node
    def consensus(self):
        neighbours = self.nodes
        new_chain = None
        # We're only looking for chains longer than ours
        max_length = len(self.chain)
        # Grab and verify the chains from all the nodes in our network
        for node in neighbours:
            response = requests.get('http://' + node + '/type')
            if response.status_code == 200:
                if response.json()['type'] == "Full Node":
                    response = requests.get('http://' + node + '/fullchain')
                    if response.status_code == 200:
                        length = response.json()['length']
                        chain = response.json()['chain']
                        # Check if the length is longer and the chain is valid
                        if length > max_length and self.valid_chain(chain):
                            response = requests.get('http://' + node + '/get_transactions')
                            if response.status_code == 200:
                                blockchain.unconfirmed_transactions = response.json()['transactions']
                                max_length = length
                                new_chain = chain

        # Replace our chain if longer chain is found
        if new_chain:
            self.chain = json.loads(new_chain)
            return True
        return False

    def valid_chain(self, chain):
        # check if a blockchain is valid
        current_index = 0
        chain = json.loads(chain)
        while current_index < len(chain):
            block = json.loads(chain[current_index])
            current_block = Block(block['index'], block['difficulty'], block['transactions'], block['timestamp'],
                                  block['previous_hash'], block['hash'], block['nonce'])
            if current_index + 1 < len(chain):
                if current_block.compute_hash() != json.loads(chain[current_index + 1])['previous_hash']:
                    return False
            if isinstance(current_block.transactions, list):
                for transaction in current_block.transactions:
                    transaction = json.loads(transaction)
                    # skip Block reward and transaction fee because it does not have signature
                    if transaction['sender'] == 'Block_Reward':
                        continue
                    if transaction['sender'] == 'transaction_fee':
                        continue
                    current_transaction = Transaction(transaction['sender'], transaction['recipient'],
                                                      transaction['value'], transaction['transaction_fee'],
                                                      transaction['timestamp'], transaction['signature'])
                    # validate digital signature of each transaction
                    if not current_transaction.verify_transaction_signature():
                        return False
                #validate the merkleroot of each block and their transactions
                if not current_block.merkleRoot == get_merkleroot(current_block.transactions):
                    return False
                #validate the proof of work of each block
                if not self.is_valid_proof(current_block, block['hash']):
                    return False
            current_index += 1
        return True

#flask function for requesting our balance from other fullnode
@app.route('/balance', methods=['GET'])
def balance():
    myobj = {'address': myWallet.identity}
    neighbours = blockchain.nodes
    for node in neighbours:
        response = requests.get('http://' + node + '/type')
        if response.status_code == 200:
            if response.json()['type'] == "Full Node":
                response = requests.post('http://' + node + '/balanceOfAddress', data=myobj)
                response = {'balance': response.json()['balance']}
    return jsonify(response), 200

#flask function for lightweight node send us for their transaction, spv stands for Simplified Payment Verification
@app.route('/spv', methods=['POST'])
def spv():
    values = request.form['transaction']
    transaction = json.loads(values)
    current_transaction = Transaction(transaction['sender'], transaction['recipient'],
                                      transaction['value'], transaction['transaction_fee'],
                                      transaction['timestamp'], transaction['signature'])
    if not current_transaction.verify_transaction_signature(): #verify the signature of the transaction
        return json("Invalid transaction"), 400
    neighbours = blockchain.nodes
    blockchain.unconfirmed_transactions.append(current_transaction.to_json())
    myobj = {'transaction': json.dumps(blockchain.unconfirmed_transactions)}
    for node in neighbours: #broadcast the transaction to all the neighbours fullnode
        response = requests.get('http://' + node + '/type')
        if response.status_code == 200:
            if response.json()['type'] == "Full Node":
                response = requests.post('http://' + node + '/boardcast', data=myobj)
    return jsonify("ok"), 200

#flask function for return the header of the index they required
@app.route('/getHeader', methods=['POST'])
def getHeader():
    values = request.form['index']
    if 0 <= int(values) < len(blockchain.chain): #only return the header when the required index is in the range of 0 to the index of alst chain
        block = json.loads(blockchain.chain[int(values)])
        response = {'index': block['index'], 'difficulty': block['difficulty'], 'timestamp': block['timestamp'],
                    'previous_hash': block['previous_hash'], 'hash': block['hash'], 'nonce': block['nonce'],
                    'merkleRoot': block['merkleRoot']}
        return jsonify(response), 200
    return jsonify("Invalid index"), 400

#flask function for return the merklepath of the transaction received
@app.route('/getMerklePath', methods=['POST'])
def getMerklePath():
    values = request.form['transaction']
    transaction = json.loads(values)
    current_transaction = Transaction(transaction['sender'], transaction['recipient'],
                                      transaction['value'], transaction['transaction_fee'],
                                      transaction['timestamp'], transaction['signature'])
    for blocks in blockchain.chain:
        block = json.loads(blocks)
        currBlock = Block(block['index'], block['difficulty'], block['transactions'], block['timestamp'],
                          block['previous_hash'], block['hash'], block['nonce'])

        #to increase search speed, we will not go into the transaction list if the timestamp of the target transaction is greater than the timestamp of the block we are looking
        if current_transaction.timestamp <= currBlock.timestamp:
            for transaction in currBlock.transactions:
                tran = json.loads(transaction)
                #the target define as found when all the sender, recipient and timestamp of the transaction are same with our target
                if (current_transaction.sender == tran['sender']) and \
                        (current_transaction.recipient == tran['recipient']) and \
                        (current_transaction.timestamp == tran['timestamp']):
                    #return the merklepath of the transaction in its block
                    response = {'merkle_path': json.dumps(merklePath(currBlock.transactions, current_transaction)),
                                'index': currBlock.index}
                    return jsonify(response), 200
    response = 'transaction not found' #return transaction not found if we cannot found the target transaction in the blockchain
    return jsonify(response), 400

#flask function return the balance of the address that sent in
@app.route('/balanceOfAddress', methods=['POST'])
def balanceOfAddress():
    values = request.form['address']
    response = {'balance': blockchain.getBalanceOfAddress(values), }
    return jsonify(response), 200

#flask function for submiting new transaction
@app.route('/new_transaction', methods=['POST'])
def new_transaction():
    values = request.form
    required = ['recipient_address', 'amount']
    if not all(k in values for k in required):
        return 'Missing values', 400
    #check the balance of the wallet and rejected the transaction if the wallet do not have enough balance to pay for the transaction and the transaction fee
    if (float(values['amount']) + 0.00001) > blockchain.getBalanceOfAddress(myWallet.identity):
        return 'Not Enough Balance', 400
    transaction = Transaction(myWallet.identity, values['recipient_address'], values['amount'], "0.00001",
                              datetime.now().timestamp())
    transaction.add_signature(myWallet.sign_transaction(transaction)) #required payer to sign the transaction
    transaction_result = blockchain.add_new_transaction(transaction) #add the transaction to the block
    if transaction_result:
        response = {'message': 'Transaction will be added to Block '}
        return jsonify(response), 201
    else:
        response = {'message': 'Invalid Transaction!'}  #return error if the transaction found invalid and cannot add into the block
        return jsonify(response), 406

#flask function return the transaction_fee need to be paid
@app.route('/transaction_fee', methods=['GET'])
def transaction_fee():
    response = {'transaction_fee': "0.00001", }
    return jsonify(response), 200

#flask function return the type of the wallet
@app.route('/type', methods=['GET'])
def type():
    response = {'type': myWallet.type, }
    return jsonify(response), 200

#flask function return the public key of the wallet
@app.route('/myWallet', methods=['GET'])
def myWallet():
    response = {'publicKey': myWallet.identity, }
    return jsonify(response), 200

#flask fuction return the difficulty of current block
@app.route('/get_difficulty', methods=['GET'])
def get_difficulty():
    difficulty = blockchain.difficulty
    response = {'difficulty': difficulty}
    return jsonify(response), 200

#flask function return the list of unconfirmed transaction
@app.route('/get_transactions', methods=['GET'])
def get_transactions():
    transactions = blockchain.unconfirmed_transactions
    response = {'transactions': transactions}
    return jsonify(response), 200

#flask function return the recently 10 blocks
@app.route('/chain', methods=['GET'])
def part_chain():
    response = {'chain': blockchain.chain[-10:], 'length': len(blockchain.chain), }
    return jsonify(response), 200

#flask function return the balance of the wallet
@app.route('/getBalance', methods=['GET'])
def getBalance():
    response = {'balance': blockchain.getBalanceOfAddress(myWallet.identity), }
    return jsonify(response), 200

#flask function return the full blockchain
@app.route('/fullchain', methods=['GET'])
def full_chain():
    response = {'chain': json.dumps(blockchain.chain), 'length': len(blockchain.chain), }
    return jsonify(response), 200

#flask function return the list of the neigbour node
@app.route('/get_nodes', methods=['GET'])
def get_nodes():
    nodes = list(blockchain.nodes)
    response = {'nodes': nodes}
    return jsonify(response), 200

#flask function for register neighbour node
@app.route('/register_node', methods=['POST'])
def register_node():
    values = request.form
    node = values.get('node')
    com_port = values.get('com_port')
    if com_port is not None:
        blockchain.register_node(request.remote_addr + ":" + com_port)
        return "ok", 200
    if node is None and com_port is None:
        return "Error: Please supply a valid nodes", 400
    blockchain.register_node(node)
    node_list = requests.get('http://' + node + '/get_nodes')
    if node_list.status_code == 200:
        node_list = node_list.json()['nodes']
        for node in node_list:
            blockchain.register_node(node)
    for new_nodes in blockchain.nodes:
        requests.post('http://' + new_nodes + '/register_node', data={'com_port': str(port)})
    replaced = blockchain.consensus()
    if replaced:
        response = {'message': 'Longer authoritative chain found from peers,replacing ours',
                    'total_nodes': [node for node in blockchain.nodes]}
    else:
        response = {'message': 'New nodes have been added, but our chain is authoritative',
                    'total_nodes': [node for node in blockchain.nodes]}
    return jsonify(response), 201

#flask function for consensus the blockchain
@app.route('/consensus', methods=['GET'])
def consensus():
    replaced = blockchain.consensus()
    if replaced:
        response = {'message': 'Our chain was replaced', }
    else:
        response = {'message': 'Our chain is authoritative', }
    return jsonify(response), 200

#flask function for received the transaction by broadcast
@app.route('/boardcast', methods=['POST'])
def boardcast():
    values = request.form['transaction']
    blockchain.unconfirmed_transactions = json.loads(values)
    return "ok", 200

#flask function for the user mine the block
@app.route('/mine', methods=['GET'])
def mine():
    newblock = blockchain.mine(myWallet)
    for node in blockchain.nodes:
        requests.get('http://' + node + '/consensus')
    response = {'index': newblock.index, 'difficulty': newblock.difficulty, 'transactions': newblock.transactions,
                'timestamp': newblock.timestamp, 'nonce': newblock.nonce, 'hash': newblock.hash,
                'previous_hash': newblock.previous_hash}
    return jsonify(response), 200


if __name__ == '__main__':
    myWallet = Wallet("Full Node") #create a full node wallet
    blockchain = Blockchain()
    port = 5002 #your port number
    app.run(host='192.168.0.109', port=port) #host is your ip address
